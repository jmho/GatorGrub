# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\GatorGrub.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QApplication, QPushButton, QVBoxLayout
import requests
import json
import math
import numpy as np
from heapq import heappush, heappop
import networkx as nx
import matplotlib
matplotlib.rcParams['interactive'] == True
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas 
import matplotlib.pyplot as plt 



REG_file = 'regions.txt'
TOF_file = 'TOF.txt'
TOR_file = 'TOR.txt'
DAT_file = 'dataset.json'
base_url = 'http://api.zippopotam.us/us/'

#CONSTANTS#
STAR_THRESHOLD = 3.0
SCALER = 20
REVIEW_THRESHOLD = 30
base_url = 'http://api.zippopotam.us/us/'

def dist(b1,b2):
    R = 6371.0
    latA = math.radians(b1["latitude"])
    lonA = math.radians(b1["longitude"])
    
    latB = math.radians(b2["latitude"])
    lonB = math.radians(b2["longitude"])
    
    dlon = lonB - lonA
    dlat = latB - latA
    
    a = math.sin(dlat / 2)**2 + math.cos(latA) * math.cos(latB) * math.sin(dlon / 2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R*c
def sigmoid(x):
    return 1/(1+np.exp(-x/SCALER))
def scaleFactor(nor,star):
    stardef = star - STAR_THRESHOLD
    mult = 1
    if(stardef<0):
        mult = -1
    return mult*(2*sigmoid(nor-REVIEW_THRESHOLD)-1)
def likeability(params,business):
    #this function allows us to score how much a user might like a particular restaurant 
    #given a set of parameters or given a restaurant that we found that they would like
   
    
    #RATING SCORE (The beter the review for a restaurant and the more reviews it has the better this score will be and vice versa)
    busRating = business["stars"]
    busRevCount = business["review_count"]
    scale = scaleFactor(busRevCount,busRating)
    rating = (busRating + scale)/6



    #CATEGORY SCORE (the more matching categories found in both restaurants the higher this score will be, the keyword restaurants is weighted less and food is not weighted at all)
    buscat = business["categories"]
    paramscat = params["categories"]
    
    sum1 = 0
    sum2 = 0
    r = 'Restaurants'
    f = 'Food'
    contR = False
    l1 = len(buscat)
    l2 = len(paramscat)

    if(f in buscat and len(buscat) > 1):
        l1 = l1 -1
    if(f in paramscat and len(paramscat)> 1):
        l2 = l2 -1
    restP = .2
    if (r in buscat and r in paramscat):
        contR = True

    
    for s in buscat:
        if(s!=f):
            if s in paramscat:
                if (contR):
                    if(s==r):
                        sum1 += restP
                    else:
                        sum1 += 1 + (1-restP)/(l1-1)
                else:
                    sum1 += 1
    for s in paramscat:
        if(s!=f):
            if s in buscat:
                if (contR):
                    if(s==r):
                        sum2 += restP
                    else:
                        sum2 += 1 + (1-restP)/(l2-1)
                else:
                    sum1 += 1
    ave1 = 0
    if l1 > 0:
        ave1 = sum1/l1
    ave2 = 0
    if l2 > 0:
        ave2 = sum2/l2
    
    catScore = (ave1 + ave2)/2

    #ATTRIBUTES SCORE (restaurants that match the attributes we request like delivery or attire will add points to this score)
    busatb = business["attributes"]
    paramsatb = params["attributes"]
    #if we have no requested attributes this score will be 1
    atbScore = 1
    for line in paramsatb:
        if line in busatb:
            if paramsatb[line] == busatb[line]:
                atbScore += 1
    if len(paramsatb) > 0:
        atbScore = atbScore/len(paramsatb)
    
    #DIST SCORE (further away restaurants score lower)
    d = dist(params,business)
    distScore = 2*sigmoid(-1*d/2)

    #this weights seperate scores to fit into one superscore between 1 and 0
    return .8*(.3*rating+.4*catScore+.3*atbScore)+.2*distScore


def findRest(params,dat,n,family):
    #this function returns the n most likeable restauratns for a given set of parameters or restaurant
    heap = []
    scores = set()
    parentName = ""
    try:
        parentName = params["name"]
    except KeyError:
        pass

    #use this to make sure we avoid adding two restaurants of the same name unless one is better than the other
    #limits the likelyhood of duplicates
    nameMap = dict()
    for business in dat:
        if business["name"] not in family:
            score = likeability(params,business)
            if (score not in scores) and (business["name"] != parentName) and (business['name'] not in nameMap or nameMap[business["name"]] < score):
                scores.add(score)
                heappush(heap, (score,business))
                nameMap[business["name"]] = score
                if len(heap) > n:
                    heappop(heap)
    family.clear()
    for h in heap:
        family.add(h[1]["name"])
    return heap
  
def runAnalysis(param):
    f = open(DAT_file, encoding='utf8')
    dat = json.loads(f.readline())
    f.close()
    adjMap = dict()
    nodes = dict()
    family = set()
    initSet = findRest(param,dat,1,family)
    
    
    # builds an adjacency Map of restaurants that are the most similar and most likeable
    for suggestion in initSet:
        p1 = suggestion[1]["business_id"]
        nodes[p1] = suggestion
        adjMap[p1] = []
        set2 = findRest(suggestion[1],dat,4,family)
        for suggestion2 in set2:
            p2 = suggestion2[1]["business_id"]
            nodes[p2] = suggestion2
            adjMap[p1].append(p2)
            if p2 not in adjMap:
                adjMap[p2] = [] 
            set3 = findRest(suggestion2[1],dat,4,family)
            for suggestion3 in set3:
                p3 = suggestion3[1]["business_id"]
                nodes[p3] = suggestion3
                adjMap[p2].append(p3)
    return (adjMap,nodes)


    
def drawGraph(raw_graph_data):
 
    vertices = raw_graph_data[1]
    adjMap = raw_graph_data[0]

    graph_data = dict()
    names = set()
    nameMap = dict()
    wrappedNameMap = dict()
    for v in vertices:
        name = vertices[v][1]["name"]
        if name in names: #add to set and add as normal
            i = 2
            newname = str(name)
            #add an identifier if its a different restaurant
            while newname in names:
                newname = name  +'(' + str(i) + ')'
                i +=1
            name = newname
        
        names.add(name)
        
        WordList = name.split(' ')
        wrappedName = ''
        
       
        
        for i in range(0,int(len(WordList)/2)):
            word1 = WordList[2*i]
            word2 = ''
            
            if i+1 < len(WordList):
                word2 = ' ' + WordList[2*i+1] +'\n'
            wrappedName += word1 + word2
        
        if len(WordList) % 2 == 1:
            wrappedName += WordList[len(WordList)-1]
        
        wrappedNameMap[wrappedName] = vertices[v]
        nameMap[v] = wrappedName
    
    
    for f in adjMap:
        
        from_name = nameMap[f]
        graph_data[from_name] = []
        for t in adjMap[f]:
            to_name = nameMap[t]
            graph_data[from_name].append(to_name)
    G = nx.DiGraph(graph_data)
    pos = nx.spring_layout(G,k=8/math.sqrt(G.order()))
    nx.draw(G,pos,node_size=[len(v) * 250 for v in G.nodes()],with_labels = True, font_size = 8)    
    return [pos,wrappedNameMap,graph_data]


def clearGraph():
    plt.clf()
    
def pointDist(a,b):
    dx = a[0]-b[0]
    dy = a[1]-b[1]    
    return math.sqrt(pow(dx,2)+pow(dy,2))
     
        
    
    
REG = []
TOF = []
TOR = []




class Ui_MainWindow(object):
    catSet = set()
    selected_REG = []
    selected_TOF = []
    selected_TOR = []
    formality = 2
    takeoutdelivery = 2
    nM = dict()
    pos = dict()
    graph = dict()
    def setupUi(self, MainWindow):
        
        MainWindow.setObjectName("poop")
        MainWindow.resize(1423, 684)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        
        
        #REGION SELECTION
        self.regionsListWidget = QtWidgets.QListWidget(self.centralwidget)
        self.regionsListWidget.setGeometry(QtCore.QRect(30, 160, 241, 161))
        self.regionsListWidget.setObjectName("regionsListWidget")
        
        with open(REG_file) as f:
            for line in f:
                if(line[-1] == '\n'):
                    self.regionsListWidget.addItem(line[:-1])
                    REG.append(line[:-1])
                else:
                    self.regionsListWidget.addItem(line)
                    REG.append(line)
        f.close()
        self.regionsListWidget.itemClicked.connect(self.addRegion)
        
        
        self.selectedRegListWidget = QtWidgets.QListWidget(self.centralwidget)
        self.selectedRegListWidget.setGeometry(QtCore.QRect(30, 330, 241, 161))
        self.selectedRegListWidget.setObjectName("selectedRegListWidget")
        self.selectedRegListWidget.itemClicked.connect(self.remRegion)
        
        
        
        #FOOD TYPE SELCTION
        self.ftypesListWidget = QtWidgets.QListWidget(self.centralwidget)
        self.ftypesListWidget.setGeometry(QtCore.QRect(280, 160, 241, 161))
        self.ftypesListWidget.setObjectName("ftypesListWidget")
        
        with open(TOF_file) as f:
            for line in f:
                if(line[-1] == '\n'):
                    self.ftypesListWidget.addItem(line[:-1])
                    TOF.append(line[:-1])
                else:
                    self.ftypesListWidget.addItem(line)
                    TOF.append(line)
        f.close()
        self.ftypesListWidget.itemClicked.connect(self.addFood)
        
        self.selectedFtypesListWidget = QtWidgets.QListWidget(self.centralwidget)
        self.selectedFtypesListWidget.setGeometry(QtCore.QRect(280, 330, 241, 161))
        self.selectedFtypesListWidget.setObjectName("selectedFtypesListWidget")
        self.selectedFtypesListWidget.itemClicked.connect(self.remFood)
        
       
        
        
        self.rtypesListWidget = QtWidgets.QListWidget(self.centralwidget)
        self.rtypesListWidget.setGeometry(QtCore.QRect(530, 160, 241, 161))
        self.rtypesListWidget.setObjectName("rtypesListWidget")
        
        with open(TOR_file) as f:
            for line in f:
                if(line[-1] == '\n'):
                    self.rtypesListWidget.addItem(line[:-1])
                    TOR.append(line[:-1])
                else:
                    self.rtypesListWidget.addItem(line)
                    TOR.append(line)
        f.close()
        self.rtypesListWidget.itemClicked.connect(self.addRestaurant)
        
        
        
        
        
        self.selectedRtypesListWidget = QtWidgets.QListWidget(self.centralwidget)
        self.selectedRtypesListWidget.setGeometry(QtCore.QRect(530, 330, 241, 161))
        self.selectedRtypesListWidget.setObjectName("selectedRtypesListWidget")
        self.selectedRtypesListWidget.itemClicked.connect(self.remRestaurant)
        
        
        self.cityBox = QtWidgets.QTextEdit(self.centralwidget)
        self.cityBox.setGeometry(QtCore.QRect(30, 60, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.cityBox.setFont(font)
        self.cityBox.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.cityBox.setObjectName("cityBox")
        
        self.stateBox = QtWidgets.QTextEdit(self.centralwidget)
        self.stateBox.setGeometry(QtCore.QRect(160, 60, 51, 31))
        self.stateBox.setFont(font)
        self.stateBox.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.stateBox.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.stateBox.setReadOnly(False)
        self.stateBox.setObjectName("stateBox")
        
        
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 40, 81, 20))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(160, 40, 101, 21))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(90, 140, 141, 16))
        self.label_3.setObjectName("label_3")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(340, 140, 141, 16))
        self.label_5.setObjectName("label_5")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(570, 140, 151, 16))
        self.label_4.setObjectName("label_4")
        
        
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(160, 560, 96, 65))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        
        #radio buttons for take out or delivery options
        self.takeOutButton = QtWidgets.QRadioButton(self.layoutWidget)
        self.takeOutButton.setObjectName("takeOutButton")
        self.takeOutButton.clicked.connect(lambda: self.tD(0))
        self.verticalLayout_2.addWidget(self.takeOutButton)
        
        self.deliveryButton = QtWidgets.QRadioButton(self.layoutWidget)
        self.deliveryButton.setObjectName("deliveryButton")
        self.deliveryButton.clicked.connect(lambda: self.tD(1))
        self.verticalLayout_2.addWidget(self.deliveryButton)
        
        self.neitherbutton = QtWidgets.QRadioButton(self.layoutWidget)
        self.neitherbutton.setChecked(True)
        self.neitherbutton.setObjectName("neitherbutton")
        self.neitherbutton.clicked.connect(lambda: self.tD(2))
        self.verticalLayout_2.addWidget(self.neitherbutton)
       
        
        
        self.submitButton = QtWidgets.QPushButton(self.centralwidget)
        self.submitButton.setGeometry(QtCore.QRect(670, 600, 101, 23))
        self.submitButton.setObjectName("submitButton")
        self.submitButton.clicked.connect(self.submit)
        
        
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(30, 100, 171, 16))
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(30, 540, 47, 13))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(160, 536, 191, 20))
        self.label_8.setObjectName("label_8")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(30, 560, 96, 65))
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.attireCasualButton = QtWidgets.QRadioButton(self.widget)
        self.attireCasualButton.setObjectName("attireCasualButton")
        self.attireCasualButton.clicked.connect(lambda: self.changeFormality(0))
        
        self.verticalLayout.addWidget(self.attireCasualButton)
        self.attireFormalButton = QtWidgets.QRadioButton(self.widget)
        self.attireFormalButton.setObjectName("attireFormalButton")
        self.attireFormalButton.clicked.connect(lambda: self.changeFormality(1))
        
        self.verticalLayout.addWidget(self.attireFormalButton)
        self.attireDNCButton = QtWidgets.QRadioButton(self.widget)
        self.attireDNCButton.setChecked(True)
        self.attireDNCButton.setObjectName("attireDNCButton")
        self.attireDNCButton.clicked.connect(lambda: self.changeFormality(2))
        
        self.verticalLayout.addWidget(self.attireDNCButton)
        
        
        self.graphicsView  = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(799, 19, 621, 620))
        self.graphicsView.setObjectName("graphicsView")
         
        layout = QtWidgets.QVBoxLayout(self.graphicsView)
       
        self.figure = plt.figure() 
        self.canvas = FigureCanvas(self.figure) 
        layout.addWidget(self.canvas)
        #allows nodes to be clicked so we can get more information on them
        self.canvas.mpl_connect("button_press_event", self.on_press)
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1423, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        
        
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.stateBox.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8.25pt;\"><br /></p></body></html>"))
        self.label.setText(_translate("MainWindow", "Enter your city:"))
        self.label_2.setText(_translate("MainWindow", "Enter state: (ex: FL)"))
        self.label_3.setText(_translate("MainWindow", "Select region(s) of food"))
        self.label_5.setText(_translate("MainWindow", "Select type(s) of food"))
        self.label_4.setText(_translate("MainWindow", "Select type(s) of restaurant(s)"))
        self.takeOutButton.setText(_translate("MainWindow", "Take Out"))
        self.deliveryButton.setText(_translate("MainWindow", "Delivery"))
        self.neitherbutton.setText(_translate("MainWindow", "Neither"))
        self.submitButton.setText(_translate("MainWindow", "Find Suggestions"))
        self.label_7.setText(_translate("MainWindow", "Attire:"))
        self.label_8.setText(_translate("MainWindow", "Do you want Take out or Delivery?"))
        self.attireCasualButton.setText(_translate("MainWindow", "Casual"))
        self.attireFormalButton.setText(_translate("MainWindow", "Formal"))
        self.attireDNCButton.setText(_translate("MainWindow", "Doesn\'t matter"))
        
       
    
    def on_press(self,e):
        width, height = self.figure.canvas.get_width_height()
        x = 2*e.x/width - 1
        y = 2*e.y/height - 1
        clickCoords = [x,y]
        closest = 2
        closestName = ''
        for node in self.pos:
            nodPos = self.pos[node]
            dist = pointDist(clickCoords,nodPos)
            if dist < .25 and dist < closest:
                closest = dist
                closestName = node
                
                
                
        if closest !=2:
            info = self.nM[closestName][1]
            text = info["name"]
            text += '\nCategories: ' +  info["categories"][0]
            for i in range(1,len(info["categories"])):
                text += ', ' + info["categories"][i]
            text+= '\nAddress: ' + info["address"] + ', ' +  info["city"] + ', ' + info["state"]
            
            text += '\n\nStars: ' + str(info["stars"]) + '\nNumber of Reviews: ' + str(info["review_count"])
            
            score = self.nM[closestName][0]
            text += '\n\nLikability Rating:  ' + str(score)
            nodes = []
            if closestName in self.graph:
                text += "\n\nSimilar Restaurants: \n"
                nodes = self.graph[closestName]
            for r in nodes:
                rinfo = self.nM[r][1]
                text += rinfo["name"] + '\n'
            self.ui = Ui_InfoWindow()
            self.InfoWindow = QtWidgets.QMainWindow()
            
            self.ui.setupUi(self.InfoWindow)
            self.ui.setLabel(text)
            self.InfoWindow.show()
    
    def addRegion(self):
        item = REG[self.regionsListWidget.currentRow()]
        if item not in self.catSet:
            self.selectedRegListWidget.addItem(item)
            self.selected_REG.append(item)
            self.catSet.add(item)
    def remRegion(self):
        index  = self.selectedRegListWidget.currentRow()
        self.selectedRegListWidget.takeItem(index)
        self.catSet.remove(self.selected_REG[index])
        del self.selected_REG[index]
        
    def addFood(self):
        item = TOF[self.ftypesListWidget.currentRow()]
        if item not in self.catSet:
            self.selectedFtypesListWidget.addItem(item)
            self.selected_TOF.append(item)
            self.catSet.add(item)
    def remFood(self):
        index  = self.selectedFtypesListWidget.currentRow()
        self.selectedFtypesListWidget.takeItem(index)
        self.catSet.remove(self.selected_TOF[index])
        del self.selected_TOF[index]
        
    def addRestaurant(self):
        item = TOR[self.rtypesListWidget.currentRow()]
        if item not in self.catSet:
            self.selectedRtypesListWidget.addItem(item)
            self.selected_TOR.append(item)
            self.catSet.add(item)
    def remRestaurant(self):
        index  = self.selectedRtypesListWidget.currentRow()
        self.selectedRtypesListWidget.takeItem(index)
        self.catSet.remove(self.selected_TOR[index])
        del self.selected_TOR[index]
    def submit(self):

        clearGraph()
        self.canvas.draw()
        
        submit = False
        coords = ()
        city = self.cityBox.toPlainText().lower()
        state = self.stateBox.toPlainText().lower()
        if(len(city) != 0 and len(state) != 0):
            r = requests.get(base_url+state.lower()+"/"+city.lower())
            j = r.json()
            try:
                coords = (float(j["places"][0]["latitude"]), float(j["places"][0]["longitude"]))
                submit = True
                self.label_6.setText("")
            except KeyError:
                pass
        
        if(submit):
            
            params = dict()
           
            setList = [self.selected_REG,self.selected_TOF,self.selected_TOR]
            categories = list(set().union(*setList))
            params["attributes"] = dict()
            params["categories"] = categories
            params["latitude"] = coords[0]
            params["longitude"] = coords[1]
            
            if(self.formality != 2):
                options = ["u'casual'","u'formal'"]
                params["attributes"]["RestaurantsAttire:"] = options[self.formality]
            if(self.takeoutdelivery != 2):
                options = ["RestaurantsTakeOut","RestaurantsDelivery"]
                params["attributes"][options[self.takeoutdelivery]] = True
            #print(params)
            
            g = runAnalysis(params)
            ret = drawGraph(g)
            self.nM = ret[1]
            self.pos = ret[0]
            self.graph = ret[2]
            self.canvas.draw()
            self.canvas.show()
        else:
            self.label_6.setText("Enter a valid location!")
    def tD(self,i):
        self.takeoutdelivery = i
    def changeFormality(self,i):
        self.formality = i
        
class Ui_InfoWindow(object):
    def setupUi(self, InfoWindow):
        InfoWindow.setObjectName("InfoWindow")
        InfoWindow.resize(500, 500)
        self.centralwidget = QtWidgets.QWidget(InfoWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(25, 25, 450, 430))
        self.textEdit.setReadOnly(True)
        self.textEdit.setObjectName("textEdit")
        
        font = QtGui.QFont()
        font.setPointSize(16)
        self.textEdit.setFont(font)
        InfoWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(InfoWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 500, 21))
        self.menubar.setObjectName("menubar")
        InfoWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(InfoWindow)
        self.statusbar.setObjectName("statusbar")
        InfoWindow.setStatusBar(self.statusbar)

        self.retranslateUi(InfoWindow)
        QtCore.QMetaObject.connectSlotsByName(InfoWindow)

    def retranslateUi(self, InfoWindow):
        _translate = QtCore.QCoreApplication.translate
        InfoWindow.setWindowTitle(_translate("InfoWindow", "InfoWindow"))
        self.textEdit.setHtml(_translate("InfoWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
    def setLabel(self,text):
        self.textEdit.setText(text)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
